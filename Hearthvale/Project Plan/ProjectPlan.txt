Hearthvale Project Plan

| Feature Area         | Status       | Notes                                                                 | 
|----------------------|--------------|-----------------------------------------------------------------------| 
| Combat System        | ⏳ Incomplete| Refactored: Combat and movement logic now use controllers.            |
|                      |              | Player attacks, NPC reactions, health, and defeat logic implemented.  |
|                      |              | CombatEffectsManager integrated for hit effects and damage text.      |
|                      |              | Player health bar and collision box visualization present.            |
|                      |              | Sound and advanced feedback partially implemented.                    | 
| Weapon Leveling      | ⏳ Pending   | Weapon class exists. No XP, leveling, or UI yet.                      | 
| Dungeon Interactivity| ⏳ Pending   | Not started                                                           | 
| City Building        | ⏳ Pending   | Not started                                                           | 
| Time/Story           | ⏳ Pending   | Not started                                                           |

1. Combat System
Status: ⏳ Incomplete
Progress:
•	Implemented:
    •	Player and NPC health, damage, and defeat logic.
    •	Player health bar and cooldown (immunity) logic.
    •	Combat and movement refactored into PlayerCombatController and PlayerMovementController.
    •	Visual feedback: hit effects, damage text, defeat animations, collision box visualization.
    •	Sound effects for hit and defeat events.
    •	Game loop updated: Player receives CombatEffectsManager and NPC list for attack resolution.
•	Missing/To Do:
    •	Advanced feedback (camera shake for critical hits, invulnerability cues, etc.).
    •	Knockback/stun effects and UI feedback for special events.
    •	Weapon XP, leveling, and UI.
    •	Expanded NPC reactions and behaviors.

2. Weapon Leveling
Status: ⏳ Pending
Progress:
•	Weapon class exists.
•	No weapon XP, leveling, or UI for weapon progress yet.

3. Dungeon Interactivity
Status: ⏳ Pending
Progress:
•	Not started.

4. City Building (Georama) Prototype
Status: ⏳ Pending
Progress:
•	Not started.

5. Time/Story Progression
Status: ⏳ Pending
Progress:
•	Not started.
•	No day/night cycle, scheduled events, or NPC routines.
---
Summary of Solution Progress
•	Combat System: Substantially implemented, with core gameplay and feedback present. Some polish and advanced features remain.
•	Other Features: Weapon leveling, dungeon interactivity, city building, and time/story progression are planned but not yet started in code.
Next recommended steps:
•	Finalize and polish combat feedback (visuals, sound, advanced effects).
•	Begin weapon leveling system (XP, UI, stat growth).
•	Progress to dungeon interactivity and other features as outlined in your plan.

---
1.Combat System
1. Player Attacks
•	Decide on attack type (melee, ranged, or both).
•	Add input handling for attack actions (e.g., key press or button).
2. NPC/Enemy Health
•	Add a Health property to your NPC class.
•	Implement logic to reduce health when hit.
3. Damage & Defeat
•	Add a method to apply damage to NPCs.
•	Handle NPC defeat (e.g., play animation, remove from scene).
4. Collision/Hit Detection
•	Detect when an attack hits an NPC (simple rectangle or circle overlap to start).
5. Feedback
•	Play sound and show visual effect on hit.

---
2. Weapon Leveling
1.	Weapon Experience
•	Define a Weapon class with XP and level properties.
•	Grant XP to weapons when defeating enemies.
2.	Weapon Stats & Growth
•	Increase weapon stats (damage, speed, etc.) as they level up.
•	Allow for branching upgrade paths or evolution.
3.	Weapon UI
•	Display weapon XP, level, and stats in the UI.
•	Show progress toward next level.
4.	Weapon Management
•	Allow equipping, unequipping, and switching weapons.
•	Support for multiple weapon types.
---
3. Dungeon Interactivity
1.	Collectible Items
•	Place items (keys, loot, health) in the dungeon.
•	Allow the player to pick up and use items.
2.	Puzzles & Obstacles
•	Add simple puzzles (e.g., switches, locked doors).
•	Require items or actions to progress.
3.	Enemy Variety
•	Implement different enemy types with unique behaviors.
•	Add patrols, ranged attacks, or special abilities.
4.	Environmental Hazards
•	Include traps or hazards (spikes, pits, etc.).
•	Provide visual cues and feedback.
---
4. City Building (Georama) Prototype
1.	Placement System
•	Allow the player to select and place buildings/objects in a town area.
•	Show placement preview and validate positions.
2.	Object Management
•	Enable moving, rotating, or removing placed objects.
•	Track placed objects for town goals.
3.	UI for Building
•	Create a simple menu for selecting objects to place.
•	Display requirements or costs for placement.
4.	Town Progression
•	Track town goals or population.
•	Unlock new objects as the town grows.
---
5. Time/Story Progression
1.	Day/Night Cycle
•	Implement a timer for day/night transitions.
•	Change lighting, music, or NPC behavior based on time.
2.	Scheduled Events
•	Trigger story events or cutscenes at certain times or after actions.
•	Allow for recurring or one-time events.
3.	NPC Schedules
•	Give NPCs routines that change with the time of day.
•	Enable dialogue or quests that depend on time.
4.	Story Advancement
•	Track story progress and unlock new areas or features.
•	Display story objectives or logs in the UI.
---


# Project Plan Update - July 28, 2025

## Refactored Player Architecture
- Extracted movement logic into PlayerMovementController.
- Extracted combat logic into PlayerCombatController.
- Player now delegates movement and combat to respective controllers.

## Combat Effects Integration
- Integrated CombatEffectsManager for hit effects and damage text.
- PlayerCombatController now receives CombatEffectsManager via constructor.
- Damage text and screen shake are triggered when NPCs are hit.

## Attack & Damage Flow
- Player.Update now passes NPC list to PlayerCombatController.
- PlayerCombatController checks for attack collisions and applies damage to NPCs.
- Damage is applied only once per attack swing.

## Game Loop Changes
- GameScene now instantiates Player with CombatEffectsManager.
- GameScene passes NPCs to Player.Update for combat resolution.

## Codebase Modernization
- All code updated to C# 12 and .NET 8.
- Improved encapsulation and separation of concerns for maintainability.

## Next Steps
- Add more weapon types and attack animations.
- Expand NPC behaviors and reactions to being hit.
- Polish UI feedback for combat and health changes.